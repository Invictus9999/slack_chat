// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package chatdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Channeltype string

const (
	ChanneltypeUser    Channeltype = "user"
	ChanneltypeChannel Channeltype = "channel"
)

func (e *Channeltype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Channeltype(s)
	case string:
		*e = Channeltype(s)
	default:
		return fmt.Errorf("unsupported scan type for Channeltype: %T", src)
	}
	return nil
}

type NullChanneltype struct {
	Channeltype Channeltype
	Valid       bool // Valid is true if Channeltype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChanneltype) Scan(value interface{}) error {
	if value == nil {
		ns.Channeltype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Channeltype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChanneltype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Channeltype), nil
}

type Channel struct {
	ID          pgtype.UUID
	EmailID     string
	ChannelType Channeltype
}

type Membership struct {
	ID             pgtype.UUID
	SubscriberID   pgtype.UUID
	SubscribedToID pgtype.UUID
}

type Message struct {
	ID         pgtype.UUID
	Content    pgtype.Text
	SenderID   pgtype.UUID
	ReceiverID pgtype.UUID
	CreatedAt  pgtype.Timestamp
}
